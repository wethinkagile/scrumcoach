{
  "version": 3,
  "sources": ["browser-external:child_process", "browser-external:stream", "../../puppeteer-core/src/node/ScreenRecorder.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"child_process\" has been externalized for browser compatibility. Cannot access \"child_process.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ChildProcessWithoutNullStreams} from 'child_process';\nimport {spawn, spawnSync} from 'child_process';\nimport {PassThrough} from 'stream';\n\nimport debug from 'debug';\n\nimport type {OperatorFunction} from '../../third_party/rxjs/rxjs.js';\nimport {\n  bufferCount,\n  concatMap,\n  filter,\n  from,\n  fromEvent,\n  lastValueFrom,\n  map,\n  takeUntil,\n  tap,\n} from '../../third_party/rxjs/rxjs.js';\nimport {CDPSessionEvent} from '../api/CDPSession.js';\nimport type {BoundingBox} from '../api/ElementHandle.js';\nimport type {Page} from '../api/Page.js';\nimport {debugError, fromEmitterEvent} from '../common/util.js';\nimport {guarded} from '../util/decorators.js';\nimport {asyncDisposeSymbol} from '../util/disposable.js';\n\nconst CRF_VALUE = 30;\nconst DEFAULT_FPS = 30;\n\nconst debugFfmpeg = debug('puppeteer:ffmpeg');\n\n/**\n * @internal\n */\nexport interface ScreenRecorderOptions {\n  speed?: number;\n  crop?: BoundingBox;\n  format?: 'gif' | 'webm';\n  scale?: number;\n  path?: string;\n}\n\n/**\n * @public\n */\nexport class ScreenRecorder extends PassThrough {\n  #page: Page;\n\n  #process: ChildProcessWithoutNullStreams;\n\n  #controller = new AbortController();\n  #lastFrame: Promise<readonly [Buffer, number]>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    page: Page,\n    width: number,\n    height: number,\n    {speed, scale, crop, format, path}: ScreenRecorderOptions = {}\n  ) {\n    super({allowHalfOpen: false});\n\n    path ??= 'ffmpeg';\n\n    // Tests if `ffmpeg` exists.\n    const {error} = spawnSync(path);\n    if (error) {\n      throw error;\n    }\n\n    this.#process = spawn(\n      path,\n      // See https://trac.ffmpeg.org/wiki/Encode/VP9 for more information on flags.\n      [\n        ['-loglevel', 'error'],\n        // Reduces general buffering.\n        ['-avioflags', 'direct'],\n        // Reduces initial buffering while analyzing input fps and other stats.\n        [\n          '-fpsprobesize',\n          '0',\n          '-probesize',\n          '32',\n          '-analyzeduration',\n          '0',\n          '-fflags',\n          'nobuffer',\n        ],\n        // Forces input to be read from standard input, and forces png input\n        // image format.\n        ['-f', 'image2pipe', '-c:v', 'png', '-i', 'pipe:0'],\n        // Overwrite output and no audio.\n        ['-y', '-an'],\n        // This drastically reduces stalling when cpu is overbooked. By default\n        // VP9 tries to use all available threads?\n        ['-threads', '1'],\n        // Specifies the frame rate we are giving ffmpeg.\n        ['-framerate', `${DEFAULT_FPS}`],\n        // Specifies the encoding and format we are using.\n        this.#getFormatArgs(format ?? 'webm'),\n        // Disable bitrate.\n        ['-b:v', '0'],\n        // Filters to ensure the images are piped correctly.\n        [\n          '-vf',\n          `${\n            speed ? `setpts=${1 / speed}*PTS,` : ''\n          }crop='min(${width},iw):min(${height},ih):0:0',pad=${width}:${height}:0:0${\n            crop ? `,crop=${crop.width}:${crop.height}:${crop.x}:${crop.y}` : ''\n          }${scale ? `,scale=iw*${scale}:-1` : ''}`,\n        ],\n        'pipe:1',\n      ].flat(),\n      {stdio: ['pipe', 'pipe', 'pipe']}\n    );\n    this.#process.stdout.pipe(this);\n    this.#process.stderr.on('data', (data: Buffer) => {\n      debugFfmpeg(data.toString('utf8'));\n    });\n\n    this.#page = page;\n\n    const {client} = this.#page.mainFrame();\n    client.once(CDPSessionEvent.Disconnected, () => {\n      void this.stop().catch(debugError);\n    });\n\n    this.#lastFrame = lastValueFrom(\n      fromEmitterEvent(client, 'Page.screencastFrame').pipe(\n        tap(event => {\n          void client.send('Page.screencastFrameAck', {\n            sessionId: event.sessionId,\n          });\n        }),\n        filter(event => {\n          return event.metadata.timestamp !== undefined;\n        }),\n        map(event => {\n          return {\n            buffer: Buffer.from(event.data, 'base64'),\n            timestamp: event.metadata.timestamp!,\n          };\n        }),\n        bufferCount(2, 1) as OperatorFunction<\n          {buffer: Buffer; timestamp: number},\n          [\n            {buffer: Buffer; timestamp: number},\n            {buffer: Buffer; timestamp: number},\n          ]\n        >,\n        concatMap(([{timestamp: previousTimestamp, buffer}, {timestamp}]) => {\n          return from(\n            Array<Buffer>(\n              Math.round(\n                DEFAULT_FPS * Math.max(timestamp - previousTimestamp, 0)\n              )\n            ).fill(buffer)\n          );\n        }),\n        map(buffer => {\n          void this.#writeFrame(buffer);\n          return [buffer, performance.now()] as const;\n        }),\n        takeUntil(fromEvent(this.#controller.signal, 'abort'))\n      ),\n      {defaultValue: [Buffer.from([]), performance.now()] as const}\n    );\n  }\n\n  #getFormatArgs(format: 'webm' | 'gif') {\n    switch (format) {\n      case 'webm':\n        return [\n          // Sets the codec to use.\n          ['-c:v', 'vp9'],\n          // Sets the format\n          ['-f', 'webm'],\n          // Sets the quality. Lower the better.\n          ['-crf', `${CRF_VALUE}`],\n          // Sets the quality and how efficient the compression will be.\n          ['-deadline', 'realtime', '-cpu-used', '8'],\n        ].flat();\n      case 'gif':\n        return [\n          // Sets the frame rate and uses a custom palette generated from the\n          // input.\n          [\n            '-vf',\n            'fps=5,split[s0][s1];[s0]palettegen=stats_mode=diff[p];[s1][p]paletteuse',\n          ],\n          // Sets the format\n          ['-f', 'gif'],\n        ].flat();\n    }\n  }\n\n  @guarded()\n  async #writeFrame(buffer: Buffer) {\n    const error = await new Promise<Error | null | undefined>(resolve => {\n      this.#process.stdin.write(buffer, resolve);\n    });\n    if (error) {\n      console.log(`ffmpeg failed to write: ${error.message}.`);\n    }\n  }\n\n  /**\n   * Stops the recorder.\n   *\n   * @public\n   */\n  @guarded()\n  async stop(): Promise<void> {\n    if (this.#controller.signal.aborted) {\n      return;\n    }\n    // Stopping the screencast will flush the frames.\n    await this.#page._stopScreencast().catch(debugError);\n\n    this.#controller.abort();\n\n    // Repeat the last frame for the remaining frames.\n    const [buffer, timestamp] = await this.#lastFrame;\n    await Promise.all(\n      Array<Buffer>(\n        Math.max(\n          1,\n          Math.round((DEFAULT_FPS * (performance.now() - timestamp)) / 1000)\n        )\n      )\n        .fill(buffer)\n        .map(this.#writeFrame.bind(this))\n    );\n\n    // Close stdin to notify FFmpeg we are done.\n    this.#process.stdin.end();\n    await new Promise(resolve => {\n      this.#process.once('close', resolve);\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async [asyncDisposeSymbol](): Promise<void> {\n    await this.stop();\n  }\n}\n"],
  "mappings": "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",
  "names": ["debug"]
}
