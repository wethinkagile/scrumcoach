import * as _pandacss_types from '@pandacss/types';

declare const preset: {
    conditions: {
        hover: string;
        focus: string;
        focusWithin: string;
        focusVisible: string;
        disabled: string;
        active: string;
        visited: string;
        target: string;
        readOnly: string;
        readWrite: string;
        empty: string;
        checked: string;
        enabled: string;
        expanded: string;
        highlighted: string;
        before: string;
        after: string;
        firstLetter: string;
        firstLine: string;
        marker: string;
        selection: string;
        file: string;
        backdrop: string;
        first: string;
        last: string;
        only: string;
        even: string;
        odd: string;
        firstOfType: string;
        lastOfType: string;
        onlyOfType: string;
        peerFocus: string;
        peerHover: string;
        peerActive: string;
        peerFocusWithin: string;
        peerFocusVisible: string;
        peerDisabled: string;
        peerChecked: string;
        peerInvalid: string;
        peerExpanded: string;
        peerPlaceholderShown: string;
        groupFocus: string;
        groupHover: string;
        groupActive: string;
        groupFocusWithin: string;
        groupFocusVisible: string;
        groupDisabled: string;
        groupChecked: string;
        groupExpanded: string;
        groupInvalid: string;
        indeterminate: string;
        required: string;
        valid: string;
        invalid: string;
        autofill: string;
        inRange: string;
        outOfRange: string;
        placeholder: string;
        placeholderShown: string;
        pressed: string;
        selected: string;
        default: string;
        optional: string;
        open: string;
        closed: string;
        fullscreen: string;
        loading: string;
        currentPage: string;
        currentStep: string;
        motionReduce: string;
        motionSafe: string;
        print: string;
        landscape: string;
        portrait: string;
        dark: string;
        light: string;
        osDark: string;
        osLight: string;
        highContrast: string;
        lessContrast: string;
        moreContrast: string;
        ltr: string;
        rtl: string;
        scrollbar: string;
        scrollbarThumb: string;
        scrollbarTrack: string;
        horizontal: string;
        vertical: string;
        starting: string;
    };
    utilities: _pandacss_types.UtilityConfig;
    patterns: {
        box: {
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            };
        };
        flex: {
            properties: {
                align: {
                    type: "property";
                    value: "alignItems";
                };
                justify: {
                    type: "property";
                    value: "justifyContent";
                };
                direction: {
                    type: "property";
                    value: "flexDirection";
                };
                wrap: {
                    type: "property";
                    value: "flexWrap";
                };
                basis: {
                    type: "property";
                    value: "flexBasis";
                };
                grow: {
                    type: "property";
                    value: "flexGrow";
                };
                shrink: {
                    type: "property";
                    value: "flexShrink";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                flexDirection: any;
                alignItems: any;
                justifyContent: any;
                flexWrap: any;
                flexBasis: any;
                flexGrow: any;
                flexShrink: any;
            };
        };
        stack: {
            properties: {
                align: {
                    type: "property";
                    value: "alignItems";
                };
                justify: {
                    type: "property";
                    value: "justifyContent";
                };
                direction: {
                    type: "property";
                    value: "flexDirection";
                };
                gap: {
                    type: "property";
                    value: "gap";
                };
            };
            defaultValues: {
                direction: string;
                gap: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                flexDirection: any;
                alignItems: any;
                justifyContent: any;
                gap: any;
            };
        };
        vstack: {
            jsxName: string;
            properties: {
                justify: {
                    type: "property";
                    value: "justifyContent";
                };
                gap: {
                    type: "property";
                    value: "gap";
                };
            };
            defaultValues: {
                gap: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                alignItems: "center";
                justifyContent: any;
                gap: any;
                flexDirection: "column";
            };
        };
        hstack: {
            jsxName: string;
            properties: {
                justify: {
                    type: "property";
                    value: "justifyContent";
                };
                gap: {
                    type: "property";
                    value: "gap";
                };
            };
            defaultValues: {
                gap: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                alignItems: "center";
                justifyContent: any;
                gap: any;
                flexDirection: "row";
            };
        };
        spacer: {
            properties: {
                size: {
                    type: "token";
                    value: "spacing";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map }: _pandacss_types.PatternHelpers): {
                alignSelf: "stretch";
                justifySelf: "stretch";
                flex: any;
            };
        };
        square: {
            properties: {
                size: {
                    type: "property";
                    value: "width";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                alignItems: "center";
                justifyContent: "center";
                flex: "0 0 auto";
                width: any;
                height: any;
            };
        };
        circle: {
            properties: {
                size: {
                    type: "property";
                    value: "width";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                alignItems: "center";
                justifyContent: "center";
                flex: "0 0 auto";
                width: any;
                height: any;
                borderRadius: "9999px";
            };
        };
        center: {
            properties: {
                inline: {
                    type: "boolean";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex" | "inline-flex";
                alignItems: "center";
                justifyContent: "center";
            };
        };
        linkBox: {
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                position: "relative";
                '& :where(a, abbr)': {
                    position: "relative";
                    zIndex: "1";
                };
            };
        };
        linkOverlay: {
            jsxElement: string;
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                position: "static";
                _before: any;
            };
        };
        aspectRatio: {
            properties: {
                ratio: {
                    type: "number";
                };
            };
            blocklist: "aspectRatio"[];
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map }: _pandacss_types.PatternHelpers): {
                position: "relative";
                _before: {
                    content: "\"\"";
                    display: "block";
                    height: "0";
                    paddingBottom: any;
                };
                '&>*': {
                    display: "flex";
                    justifyContent: "center";
                    alignItems: "center";
                    overflow: "hidden";
                    position: "absolute";
                    inset: "0";
                    width: "100%";
                    height: "100%";
                };
                '&>img, &>video': {
                    objectFit: "cover";
                };
            };
        };
        grid: {
            properties: {
                gap: {
                    type: "property";
                    value: "gap";
                };
                columnGap: {
                    type: "property";
                    value: "gap";
                };
                rowGap: {
                    type: "property";
                    value: "gap";
                };
                columns: {
                    type: "number";
                };
                minChildWidth: {
                    type: "token";
                    value: "sizes";
                    property: "width";
                };
            };
            defaultValues(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                gap: string | undefined;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map, isCssUnit }: _pandacss_types.PatternHelpers): {
                display: "grid";
                gridTemplateColumns: any;
                gap: any;
                columnGap: any;
                rowGap: any;
            };
        };
        gridItem: {
            properties: {
                colSpan: {
                    type: "number";
                };
                rowSpan: {
                    type: "number";
                };
                colStart: {
                    type: "number";
                };
                rowStart: {
                    type: "number";
                };
                colEnd: {
                    type: "number";
                };
                rowEnd: {
                    type: "number";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map }: _pandacss_types.PatternHelpers): {
                gridColumn: any;
                gridRow: any;
                gridColumnStart: any;
                gridColumnEnd: any;
                gridRowStart: any;
                gridRowEnd: any;
            };
        };
        wrap: {
            properties: {
                gap: {
                    type: "property";
                    value: "gap";
                };
                rowGap: {
                    type: "property";
                    value: "gap";
                };
                columnGap: {
                    type: "property";
                    value: "gap";
                };
                align: {
                    type: "property";
                    value: "alignItems";
                };
                justify: {
                    type: "property";
                    value: "justifyContent";
                };
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                display: "flex";
                flexWrap: "wrap";
                alignItems: any;
                justifyContent: any;
                gap: any;
                columnGap: any;
                rowGap: any;
            };
        };
        container: {
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                position: "relative";
                maxWidth: "8xl";
                mx: string;
                px: {
                    base: string;
                    md: string;
                    lg: string;
                };
            };
        };
        divider: {
            properties: {
                orientation: {
                    type: "enum";
                    value: string[];
                };
                thickness: {
                    type: "token";
                    value: "sizes";
                    property: "borderWidth";
                };
                color: {
                    type: "token";
                    value: "colors";
                    property: "borderColor";
                };
            };
            defaultValues: {
                orientation: string;
                thickness: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map }: _pandacss_types.PatternHelpers): {
                '--thickness': any;
                width: any;
                height: any;
                borderBlockEndWidth: any;
                borderInlineEndWidth: any;
                borderColor: any;
            };
        };
        float: {
            properties: {
                offsetX: {
                    type: "token";
                    value: "spacing";
                    property: "left";
                };
                offsetY: {
                    type: "token";
                    value: "spacing";
                    property: "top";
                };
                offset: {
                    type: "token";
                    value: "spacing";
                    property: "top";
                };
                placement: {
                    type: "enum";
                    value: string[];
                };
            };
            defaultValues(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                offset: any;
                offsetX: any;
                offsetY: any;
                placement: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map }: _pandacss_types.PatternHelpers): {
                display: "inline-flex";
                justifyContent: "center";
                alignItems: "center";
                position: "absolute";
                insetBlockStart: any;
                insetBlockEnd: any;
                insetInlineStart: any;
                insetInlineEnd: any;
                translate: any;
            };
        };
        bleed: {
            properties: {
                inline: {
                    type: "property";
                    value: "marginInline";
                };
                block: {
                    type: "property";
                    value: "marginBlock";
                };
            };
            defaultValues: {
                inline: string;
                block: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }, { map, isCssUnit, isCssVar }: _pandacss_types.PatternHelpers): {
                '--bleed-x': any;
                '--bleed-y': any;
                marginInline: "calc(var(--bleed-x, 0) * -1)";
                marginBlock: "calc(var(--bleed-y, 0) * -1)";
            };
        };
        visuallyHidden: {
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                srOnly: true;
            };
        };
        cq: {
            properties: {
                name: {
                    type: "token";
                    value: "containerNames";
                    property: "containerName";
                };
                type: {
                    type: "property";
                    value: "containerType";
                };
            };
            defaultValues: {
                type: string;
            };
            transform(props: {
                [x: string]: any;
                [x: number]: any;
                [x: string & Record<never, never>]: any;
            }): {
                containerType: any;
                containerName: any;
            };
        };
    };
    globalCss: _pandacss_types.GlobalStyleObject;
};

export { preset as default, preset };
